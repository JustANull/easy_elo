extern crate chrono;
extern crate ease;
extern crate getopts;
extern crate num;

mod interop {
    use chrono::DateTime;
    use chrono::FixedOffset;
    use serde::{Deserializer, Serializer};
    use serde::de::{Deserialize, Error, Visitor};
    use serde::ser::Serialize;
    use std::ops::{Deref, DerefMut};

    #[derive(Clone, Debug)]
    pub struct SerializableDateTime(DateTime<FixedOffset>);
    impl Serialize for SerializableDateTime {
        fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {
            serializer.visit_str(&self.0.to_rfc3339())
        }
    }
    impl Deserialize for SerializableDateTime {
        fn deserialize<D>(deserializer: &mut D) -> Result<SerializableDateTime, D::Error> where D: Deserializer {
            deserializer.visit(DateTimeVisitor)
        }
    }
    struct DateTimeVisitor;
    impl Visitor for DateTimeVisitor {
        type Value = SerializableDateTime;

        fn visit_str<E>(&mut self, s: &str) -> Result<Self::Value, E> where E: Error {
            match DateTime::parse_from_rfc3339(s) {
                Ok(dt) => Ok(SerializableDateTime(dt)),
                Err(_) => Err(Error::syntax("expect an ISO 8601 datetime"))
            }
        }
    }

    impl Deref for SerializableDateTime {
        type Target = DateTime<FixedOffset>;

        fn deref<'a>(&'a self) -> &'a DateTime<FixedOffset> {
            &self.0
        }
    }
    impl DerefMut for SerializableDateTime {
        fn deref_mut<'a>(&'a mut self) -> &'a mut DateTime<FixedOffset> {
            &mut self.0
        }
    }
}
mod types {
    use interop::SerializableDateTime;
    use serde_json;
    use std::collections::HashMap;
    use std::fs::File;
    use std::io::Error as IoError;
    use std::path::Path;

    // All of a tournament's matches
    pub type TournamentMatches = Vec<TournamentMatch>;

    // All of a tournament's matches, as received from the Challonge API
    // Only correctly parses completed tournaments
    pub type TournamentMatchesChallonge = Vec<TournamentMatchChallonge>;
    // All of a tournament's participants, as received from the Challonge API
    pub type TournamentParticipantsChallonge = Vec<TournamentParticipantChallonge>;
    // A tournament match, as received from the Challonge API
    // Only correctly parses completed matches; other restrictions likely exist but are unknown
    #[derive(Debug, Deserialize)]
    pub struct TournamentMatchChallongeInterior {
        attachment_count: Option<i64>, // type unsure
        created_at: SerializableDateTime,
        group_id: Option<i64>, // type unsure
        has_attachment: bool,
        id: i64, // the exact, unique match id
        identifier: String, // what the match is called "e.g. the winner of match A plays in match B"
        location: Option<String>, // type unsure
        loser_id: i64,
        optional: bool, // should always be "false" afaik
        player1_id: i64,
        player1_is_prereq_match_loser: bool,
        player1_prereq_match_id: Option<i64>,
        player1_votes: Option<i64>, // type unsure, almost definitely wrong
        player2_id: i64,
        player2_is_prereq_match_loser: bool,
        player2_prereq_match_id: Option<i64>,
        player2_votes: Option<i64>, // type unsure, almost definitely wrong
        round: i64,
        scheduled_time: Option<SerializableDateTime>,
        started_at: Option<SerializableDateTime>,
        state: String, // should always be "complete"
        tournament_id: i64,
        underway_at: Option<SerializableDateTime>,
        updated_at: SerializableDateTime,
        winner_id: i64,
        prerequisite_match_ids_csv: String, // you must be joking
        scores_csv: String // see the above ^
    }
    // A tournament participant, as received from the Challonge API
    #[derive(Debug, Deserialize)]
    pub struct TournamentParticipantChallongeInterior {
        active: bool,
        checked_in_at: Option<SerializableDateTime>,
        created_at: SerializableDateTime,
        final_rank: Option<i64>,
        group_id: Option<i64>, // type unsure
        icon: Option<String>, // type unsure
        id: i64,
        invitation_id: Option<i64>,
        invite_email: Option<String>, // type unsure
        misc: Option<String>, // type unsure
        name: String, // the user's display name
        on_waiting_list: bool,
        seed: i64,
        tournament_id: i64,
        updated_at: SerializableDateTime,
        challonge_username: Option<String>, // what we actually want- may be null, in which case we defer to username and pray
        challonge_email_address_verified: Option<bool>, // type unsure
        removable: bool,
        participatable_or_invitation_attached: bool,
        confirm_remove: bool,
        invitation_pending: bool,
        display_name: Option<String>, // type unsure, undocumented ???
        display_name_with_invitation_email_address: Option<String>, // type unsure, ???
        email_hash: Option<String>,
        username: Option<String>, // if this is None, we cannot properly identify the user. panic abounds! or, well, skip the match and output a warning?
        attached_participatable_portrait_url: Option<String>,
        can_check_in: bool,
        checked_in: bool, // if this is true, we should check challonge_username
        reactivatable: bool
    }
    // Challonge API fixup
    #[derive(Debug, Deserialize)]
    struct TournamentMatchChallonge {
        #[serde(rename="match")]
        match_obj: TournamentMatchChallongeInterior
    }
    // ditto
    #[derive(Debug, Deserialize)]
    struct TournamentParticipantChallonge {
        participant: TournamentParticipantChallongeInterior
    }

    pub fn matches_simplify(matches: TournamentMatchesChallonge, participants: TournamentParticipantsChallonge) -> TournamentMatches {
        // First transform the participants into a map from ID to challonge_username/username
        let mut participant_ids = HashMap::new();
        for participant in participants.into_iter() {
            let TournamentParticipantChallonge {
                participant: TournamentParticipantChallongeInterior {
                    id, challonge_username, username, name, ..
                }
            } = participant;

            if let Some(username) = challonge_username {
                participant_ids.insert(id, username);
            } else if let Some(username) = username {
                participant_ids.insert(id, username);
            } else {
                println!("The user going by the name {} did not enter a Challonge username. Their matches will be ignored.", name);
            }
        }

        let mut res = vec![];

        for match_res in matches.into_iter() {
            let winner_id = match_res.match_obj.winner_id;
            let loser_id = match_res.match_obj.loser_id;

            if let Some(winner_name) = participant_ids.get(&winner_id) {
                if let Some(loser_name) = participant_ids.get(&loser_id) {
                    res.push((match_res.match_obj.updated_at, winner_name.clone(), loser_name.clone()));
                }
            }
        }

        res
    }

    // A map from a tournament id "e.g. tloc-mnm32" to a vector of match results.
    pub type TournamentCache = HashMap<String, TournamentMatches>;
    // The time of a match and the winner and loser
    pub type TournamentMatch = (SerializableDateTime, String, String);

    #[derive(Debug)]
    pub enum CacheWriteError {
        IoError(IoError),
        JsonError(serde_json::Error)
    }

    pub fn cache_read(cache_path: &Path) -> Result<TournamentCache, serde_json::Error> {
        Ok(try!(parse(cache_path)))
    }
    pub fn cache_write(cache_path: &Path, cache: &TournamentCache) -> Result<(), CacheWriteError> {
        serde_json::to_writer(&mut try!(File::create(cache_path)
                                        .map_err(CacheWriteError::IoError)),
                              cache).map_err(CacheWriteError::JsonError)
    }

    fn parse(cache_path: &Path) -> Result<TournamentCache, serde_json::Error> {
        File::open(cache_path)
            .map(|f| serde_json::from_reader(f))
            .unwrap_or_else(|_| Ok(HashMap::new()))
    }
}

use ease::{Request, Url};
use getopts::Options;
use num::traits::Float;
use std::collections::HashMap;
use std::env;
use std::fs::File;
use std::io::{BufRead, BufReader};
use std::path::Path;
use types::{TournamentMatches, TournamentMatchesChallonge, TournamentParticipantsChallonge};

fn usage(prog: &str, opts: Options) {
    let brief = format!("Usage: {} [options]", prog);
    print!("{}", opts.usage(&brief));
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let program = args[0].clone();

    let mut opts = Options::new();
    opts.optflag("h", "help", "Print this message")
        .optopt("i", "input", "The file to input tournament IDs from (default input.txt)", "INPUT_FILE")
        .reqopt("k", "api-key", "The Challonge API key (required)", "API_KEY")
        .optopt("c", "cache-file", "The file to store the tournament cache inside (default cache.json)", "CACHE_FILE")
        .optopt("o", "output", "The file to output rankings to (default output.json)", "OUTPUT_FILE");
    let opt_matches = match opts.parse(&args[1..]) {
        Ok(m) => m,
        Err(f) => {
            println!("Error: {}", f.to_string());
            usage(&program, opts);
            return;
        }
    };

    if opt_matches.opt_present("h") {
        usage(&program, opts);
        return;
    }

    let api_key = opt_matches.opt_str("k").unwrap();

    let input_pathname = opt_matches.opt_str("i").unwrap_or("input.txt".to_owned());
    let cache_pathname = opt_matches.opt_str("c").unwrap_or("cache.json".to_owned());
    let output_pathname = opt_matches.opt_str("o").unwrap_or("output.json".to_owned());

    let input_path = Path::new(&input_pathname);
    let cache_path = Path::new(&cache_pathname);
    let output_path = Path::new(&output_pathname);

    let mut cache = types::cache_read(&cache_path).expect("The cache should read successfully");

    let input_file = BufReader::new(File::open(input_path)
                                    .expect("The input file should read successfully"));
    let input_lines = input_file.lines().map(|l| l.expect("The lines should be properly formatted")).collect::<Vec<String>>();
    let input_needed = input_lines.clone().into_iter().filter(|l| !cache.contains_key(l)).collect::<Vec<String>>();

    for line in input_needed {
        println!("Retrieving {}...", line);

        let matches_url = Url::parse(&format!("https://api.challonge.com/v1/tournaments/{}/matches.json", line)).expect("The URL should be valid");
        let participants_url = Url::parse(&format!("https://api.challonge.com/v1/tournaments/{}/participants.json", line)).expect("The URL should be valid");

        let matches: TournamentMatchesChallonge = serde_json::from_str(&Request::new(matches_url).param("api_key", &api_key).get().unwrap().body).expect("We should receive valid JSON for matches");
        let participants: TournamentParticipantsChallonge = serde_json::from_str(&Request::new(participants_url).param("api_key", &api_key).get().unwrap().body).expect("We should receive valid JSON for participants");

        let simplified = types::matches_simplify(matches, participants);
        cache.insert(line, simplified);
    }

    // Get out the portion of the cache that only contains tournaments we have in our input
    let cache_needed = cache.clone().into_iter().filter(|&(ref k, _)| input_lines.clone().into_iter().any(|ref l| l == k)).collect::<HashMap<String, TournamentMatches>>();
    // Sort the needed bit of the cache by the date the matches finished
    let mut cache_needed_vec = vec![];
    for (_, matches) in cache_needed {
        cache_needed_vec.extend(matches.into_iter());
    }
    cache_needed_vec.sort_by(|&(ref a, _, _), &(ref b, _, _)| a.cmp(b));

    // And finally, apply the Elo algorithm
    // The map relates username to (number of matches played, ranking)
    let mut rankings = HashMap::<String, (i64, f64)>::new();
    for (_, winner, loser) in cache_needed_vec.into_iter() {
        let (n_winner, r_winner) = *rankings.get(&winner).unwrap_or(&(0, 0.0));
        let (n_loser, r_loser) = *rankings.get(&loser).unwrap_or(&(0, 0.0));

        let k = 24.0;

        let p_winner = 1.0 / (1.0 + 10.0.powf((r_loser - r_winner) / 400.0));
        let p_loser = 1.0 / (1.0 + 10.0.powf((r_winner - r_loser) / 400.0));

        rankings.insert(winner, (n_winner + 1, r_winner + k * p_winner));
        rankings.insert(loser, (n_loser + 1, r_loser - k * p_loser));
    }
    // And modify the numbers so they're a bit more pretty, filtering low-activity players as well
    let rankings = rankings.into_iter().filter_map(|(name, (n, rating))| {
        if n >= 10 {
            Some((name, rating + 1200.0))
        } else {
            None
        }
    }).collect::<HashMap<String, f64>>();

    serde_json::to_writer(&mut File::create(output_path).expect("The output should write successfully"), &rankings).expect("The output should format correctly.");
    types::cache_write(&cache_path, &cache).expect("The cache should write successfully");
}
